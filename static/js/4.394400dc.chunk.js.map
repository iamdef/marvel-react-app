{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelServerService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/searchChar/SeacrhChar.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelServerService","useHttp","process","request","clearError","setProcess","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","url","wiki","comics","items","_transformComics","desc","title","replace","price","prices","language","textObjects","pageCount","getAllCharacters","a","res","data","results","map","getCharacter","getCharacterByName","getAllComics","getComic","useState","useCallback","method","body","headers","fetch","response","ok","Error","status","json","AppBanner","className","avengers","avengersLogo","Skeleton","setContent","Component","itemType","Spinner","View","imgStyle","href","RandomChar","setChar","useEffect","updateChar","Math","floor","random","then","onCharLoaded","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","itemRefs","useRef","onRequest","initial","onCharListLoaded","newCharList","ended","length","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","CSSTransition","timeout","classNames","renderItems","disabled","includes","comicsId","resourceURI","substring","to","CharInfo","charId","onCharloaded","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","SearchChar","seacrhError","setSearchError","errorMessage","success","initialValues","validationSchema","Yup","min","required","onSubmit","values","htmlFor","type","placeholder","component","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/4.394400dc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelServerService = () => {\r\n\r\n    const {process, request, clearError, setProcess} = useHttp();\r\n\r\n    // функции приведения данных в удобный вид\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 180)}...` : 'There is no description for this character, so you can tell us all you know about him!',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items.slice(0,10)\r\n        }\r\n    }\r\n\r\n    const prepareDesc = (desc) => {\r\n        return desc.replace('<ul><li>', '').replace('</li></ul>', '').replace('</li><li>', ' ').replace('&rsquo;', '`');\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description\r\n            ? prepareDesc(comics.description)\r\n            : \"There is no description\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : 'NOT AVAILABLE',\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            pageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\r\n        }\r\n    }\r\n\r\n    // запрашиваем данные\r\n\r\n    const getAllCharacters = async () => {\r\n        const res = await request('https://iamdef.ru/react-back/marvel-access.php?object=allCharacters');\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`https://iamdef.ru/react-back/marvel-access.php?object=character&id=${id}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t};\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`https://iamdef.ru/react-back/marvel-access.php?object=characterByName&name=${name}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getAllComics = async () => {\r\n        const res = await request(`https://iamdef.ru/react-back/marvel-access.php?object=allComics`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`https://iamdef.ru/react-back/marvel-access.php?object=comic&id=${id}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    return {getAllCharacters,\r\n            getCharacter,\r\n            getCharacterByName,\r\n            getAllComics,\r\n            getComic,\r\n            process,\r\n            clearError,\r\n            setProcess\r\n        };\r\n}\r\n\r\nexport default useMarvelServerService;\r\n\r\n\r\n\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess};\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, data, Component, itemType = '') => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component itemType={itemType} data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport './randomChar.scss';\n// import useMarvelService from '../../services/MarvelService'; для запросов данных напрямую у Marvel\nimport useMarvelServerService from '../../services/MarvelServerService'; // для запросов данных через промежуточный сервер\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport setContent from '../../utils/setContent';\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const {process, setProcess, getCharacter, clearError} = useMarvelServerService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, char, View)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n        <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n        <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">\n                {description}\n            </p>\n            <div className=\"randomchar__btns\">\n                <a href={homepage} className=\"button button__main\">\n                    <div className=\"inner\">homepage</div>\n                </a>\n                <a href={wiki} className=\"button button__secondary\"> \n                    <div className=\"inner\">Wiki</div>\n                </a>\n            </div>\n        </div>\n    </div>\n    )\n}\n\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport './charList.scss';\nimport './transition.css';\n// import useMarvelService from '../../services/MarvelService'; для запросов данных напрямую у Marvel\nimport useMarvelServerService from '../../services/MarvelServerService'; // для запросов данных через промежуточный сервер\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const itemRefs = useRef([]);\n    \n    const duration = 500;\n\n    const {getAllCharacters, process, setProcess} = useMarvelServerService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList([...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n    }\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n    \n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n               <li \n                   className=\"char__item\"\n                   tabIndex={0}\n                   ref={el => itemRefs.current[i] = el}\n                   key={item.id}\n                   onClick={() => {\n                       props.onCharSelected(item.id);\n                       focusOnItem(i);\n                   }}\n                   onKeyPress={(e) => {\n                       if (e.key === ' ' || e.key === \"Enter\") {\n                           props.onCharSelected(item.id);\n                           focusOnItem(i);\n                       }\n                   }}>\n                       <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                       <div className=\"char__name\">{item.name}</div>\n               </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup className=\"char__grid\">\n                    {items.map((item, i) => (\n                        <CSSTransition\n                            key={item.key}\n                            timeout={duration}\n                            classNames={\n                                (i + 1) % 3 === 0 ? 'animatedChar_3'\n                                : (i + 1) % 2 === 0 ? 'animatedChar_2'\n                                : 'animatedChar'\n                            }>\n                            {item}\n                        </CSSTransition>\n                    ))}\n                </TransitionGroup>             \n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading)\n    }, [process]);\n    // eslint-disable-next-line \n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n\n\n","import { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n// import useMarvelService from '../../services/MarvelService'; для запросов данных напрямую у Marvel\nimport useMarvelServerService from '../../services/MarvelServerService'; // для запросов данных через промежуточный сервер\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, process, clearError, setProcess} = useMarvelServerService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) return;\n        clearError();\n        getCharacter(charId)\n            .then(onCharloaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharloaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, char, View)}\n        </div>\n    )\n\n\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle;\n    (thumbnail.includes('image_not_available')) ? imgStyle = {'objectFit': 'contain'} : imgStyle = {'objectFit': 'cover'};\n    const content = () => {\n\n        if (comics.length === 0) return 'There are no comics';\n\n        return comics.map(item => {\n            const comicsId = item.resourceURI.substring(43);\n            return (\n                <li key={comicsId} className=\"char__comics-item\">\n                    <NavLink to={`comics/${comicsId}`}>{item.name}</NavLink>\n                </li>\n            )\n        })\n    } \n\n\n    return (\n        <>\n        <div className=\"char__basics\">\n            <img src={thumbnail} alt={`${name}`} style={imgStyle}/>\n            <div>\n            <div className=\"char__info-name\">{name}</div>\n            <div className=\"char__btns\">\n                <a href={homepage} className=\"button button__main\">\n                    <div className=\"inner\">homepage</div>\n                </a>\n                <a href={wiki} className=\"button button__secondary\">\n                    <div className=\"inner\">Wiki</div>\n                </a>\n            </div>\n            </div>\n        </div>\n        <div className=\"char__descr\">\n        {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {content()}\n        </ul>   \n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;\n\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({error: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\r\nimport { Link } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\n// import useMarvelService from '../../services/MarvelService'; для запросов данных напрямую у Marvel\r\nimport useMarvelServerService from '../../services/MarvelServerService'; // для запросов данных через промежуточный сервер\r\n\r\nimport './searchChar.scss';\r\n\r\nconst SearchChar = () => {\r\n    const [char, setChar] = useState(null);\r\n    const [seacrhError, setSearchError] = useState(false);\r\n\r\n    const {getCharacterByName, process, setProcess, clearError} = useMarvelServerService();\r\n\r\n    const onRequest = (name) => {\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(onCharloaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharloaded = (char) => {\r\n        if(char.length === 0) {\r\n            setChar(null);\r\n            setSearchError(true)\r\n        } else {\r\n            setChar(char);\r\n            setSearchError(false);\r\n        } \r\n    }\r\n\r\n    const errorMessage =\r\n        <div className='searchChar__row' style={{'color': '#9F0013'}}>\r\n            {process === 'error' ? 'Something went wrong... Try again later'\r\n            : seacrhError ? 'A character with that name was not found. Check the name and try again!' : null}\r\n        </div>;\r\n\r\n    const success = char ?\r\n        <div className='searchChar__row'>\r\n            <div className='searchChar__status'>{`There is! Visit ${char[0].name} page?`}</div>\r\n            <Link\r\n                to={char ? `character/${char[0].id}` : ''}\r\n                className=\"button button__secondary\"\r\n                style={{\"visibility\": char ? \"visible\" : \"hidden\"}}>\r\n                <div className=\"inner\">TO PAGE</div>\r\n            </Link> \r\n        </div>\r\n        : null;\r\n\r\n    return (\r\n        <div className='searchChar__wrapper'>\r\n            <Formik\r\n                initialValues= {{\r\n                    name: '',\r\n                }}\r\n                validationSchema={\r\n                    Yup.object({\r\n                        name: Yup.string()\r\n                                    .min(3, 'Too short! Minimum 2 symbols.')\r\n                                    .required('Required field!')\r\n                    })\r\n                }\r\n                onSubmit={values => onRequest(values.name)}\r\n            >\r\n                <Form className=\"searchChar__form\">\r\n                    <label className='searchChar__formname' htmlFor=\"name\">Or find a character by name:</label>\r\n                    <Field\r\n                        className=\"searchChar__input\"\r\n                        id=\"name\"\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter name\"\r\n                    />\r\n                    <button\r\n                        className=\"button button__main\"\r\n                        type=\"submit\"\r\n                        disabled={process === 'loading'}>\r\n                        <div className=\"inner\">FIND</div>\r\n                    </button>\r\n                    <ErrorMessage\r\n                        className=\"searchChar__status\"\r\n                        style={{'color': '#9F0013', 'fontSize': '12px'}}\r\n                        name=\"name\"\r\n                        component=\"div\"\r\n                    />\r\n                </Form>\r\n            </Formik>\r\n            {errorMessage}\r\n            {success}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchChar;\r\n\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport SearchChar from \"../searchChar/SeacrhChar\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div className=\"right-content\">\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary> \r\n                    <SearchChar/>\r\n                </div>   \r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}